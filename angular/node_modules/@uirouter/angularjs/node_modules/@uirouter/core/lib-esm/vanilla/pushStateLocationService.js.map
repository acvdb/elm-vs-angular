{"version":3,"file":"pushStateLocationService.js","sourceRoot":"","sources":["@uirouter/core/vanilla/pushStateLocationService.ts"],"names":[],"mappings":";;;;;;;;;;AAMA,OAAO,EAAE,UAAU,EAAE,SAAS,EAAE,MAAM,SAAS,CAAC;AAEhD,OAAO,EAAE,oBAAoB,EAAE,MAAM,uBAAuB,CAAC;AAE7D;;;;GAIG;AACH;IAA8C,4CAAoB;IAGhE,kCAAY,MAAgB;QAA5B,YACE,kBAAM,MAAM,EAAE,IAAI,CAAC,SAGpB;QAFC,KAAI,CAAC,OAAO,GAAG,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC;QACxC,MAAM,CAAC,gBAAgB,CAAC,UAAU,EAAE,KAAI,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;;IAC7D,CAAC;IAAA,CAAC;IAEF,uCAAI,GAAJ;QACM,IAAA,mBAA2C,EAAzC,sBAAQ,EAAE,cAAI,EAAE,kBAAM,CAAoB;QAChD,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,mBAAmB;QACnD,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,mBAAmB;QAC9C,MAAM,CAAC,QAAQ,GAAG,CAAC,MAAM,GAAG,GAAG,GAAG,MAAM,GAAG,EAAE,CAAC,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,MAAM,GAAG,EAAE,CAAC,CAAC;IAC9E,CAAC;IAED,uCAAI,GAAJ,UAAK,KAAU,EAAE,KAAa,EAAE,GAAW,EAAE,OAAgB;QACvD,IAAA,SAA4B,EAA1B,oBAAO,EAAE,sBAAQ,CAAU;QACjC,IAAI,OAAO,GAAG,OAAO,CAAC,QAAQ,EAAE,GAAG,GAAG,CAAC;QAEvC,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;YACZ,QAAQ,CAAC,YAAY,CAAC,KAAK,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;QAC/C,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,QAAQ,CAAC,SAAS,CAAC,KAAK,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;QAC5C,CAAC;IACH,CAAC;IAED,0CAAO,GAAP,UAAQ,MAAgB;QACtB,iBAAM,OAAO,YAAC,MAAM,CAAC,CAAC;QACtB,MAAM,CAAC,mBAAmB,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;IACzD,CAAC;IACH,+BAAC;AAAD,CAAC,AA/BD,CAA8C,oBAAoB,GA+BjE","sourcesContent":["/**\n * @internalapi\n * @module vanilla\n */\n/** */\nimport { LocationConfig } from \"../common/coreservices\";\nimport { splitQuery, splitHash } from \"./utils\";\nimport { UIRouter } from \"../router\";\nimport { BaseLocationServices } from \"./baseLocationService\";\n\n/**\n * A `LocationServices` that gets/sets the current location using the browser's `location` and `history` apis\n *\n * Uses `history.pushState` and `history.replaceState`\n */\nexport class PushStateLocationService extends BaseLocationServices {\n  _config: LocationConfig;\n\n  constructor(router: UIRouter) {\n    super(router, true);\n    this._config = router.urlService.config;\n    window.addEventListener(\"popstate\", this._listener, false);\n  };\n\n  _get() {\n    let { pathname, hash, search } = this._location;\n    search = splitQuery(search)[1]; // strip ? if found\n    hash = splitHash(hash)[1]; // strip # if found\n    return pathname + (search ? \"?\" + search : \"\") + (hash ? \"$\" + search : \"\");\n  }\n\n  _set(state: any, title: string, url: string, replace: boolean) {\n    let { _config, _history } = this;\n    let fullUrl = _config.baseHref() + url;\n\n    if (replace) {\n      _history.replaceState(state, title, fullUrl);\n    } else {\n      _history.pushState(state, title, fullUrl);\n    }\n  }\n\n  dispose(router: UIRouter) {\n    super.dispose(router);\n    window.removeEventListener(\"popstate\", this._listener);\n  }\n}\n\n"]}