{"version":3,"file":"targetState.js","sourceRoot":"","sources":["@uirouter/core/state/targetState.ts"],"names":[],"mappings":"AAAA;;;GAGG,CAAC,kBAAkB;AAMtB,OAAO,EAAE,MAAM,EAAE,MAAM,kBAAkB,CAAC;AAC1C,OAAO,EAAE,QAAQ,EAAE,MAAM,sBAAsB,CAAC;AAEhD;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA4BG;AACH;IAGE;;;;;;;;;;;;;OAaG;IACH,qBACU,WAAwB,EACxB,WAAyB,EACjC,OAAuB,EACf,QAAgC;QAAhC,yBAAA,EAAA,aAAgC;QAHhC,gBAAW,GAAX,WAAW,CAAa;QACxB,gBAAW,GAAX,WAAW,CAAc;QAEzB,aAAQ,GAAR,QAAQ,CAAwB;QAExC,IAAI,CAAC,OAAO,GAAG,OAAO,IAAI,EAAE,CAAC;IAC/B,CAAC;IAED,gDAAgD;IAChD,0BAAI,GAAJ;QACE,MAAM,CAAC,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,WAAW,CAAC,IAAI,IAAa,IAAI,CAAC,WAAW,CAAC;IAChF,CAAC;IAED,yDAAyD;IACzD,gCAAU,GAAV;QACE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;IAED,kCAAkC;IAClC,4BAAM,GAAN;QACE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAED,kDAAkD;IAClD,4BAAM,GAAN;QACE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;IAED,uDAAuD;IACvD,2BAAK,GAAL;QACE,MAAM,CAAC,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC;IACnD,CAAC;IAED,yBAAyB;IACzB,6BAAO,GAAP;QACE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IAED,yCAAyC;IACzC,4BAAM,GAAN;QACE,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;IACvD,CAAC;IAED,kCAAkC;IAClC,2BAAK,GAAL;QACE,MAAM,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;IACvB,CAAC;IAED,uDAAuD;IACvD,2BAAK,GAAL;QACE,IAAI,IAAI,GAAS,IAAI,CAAC,OAAO,EAAE,CAAC,QAAQ,CAAC;QACzC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YAChC,IAAI,SAAS,GAAG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;YAC7C,MAAM,CAAC,wBAAsB,IAAI,CAAC,IAAI,EAAE,sBAAiB,SAAS,MAAG,CAAC;QACxE,CAAC;QACD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC;YACpB,MAAM,CAAC,oBAAkB,IAAI,CAAC,IAAI,EAAE,MAAG,CAAC;QAC1C,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC;YACzB,MAAM,CAAC,YAAU,IAAI,CAAC,IAAI,EAAE,gCAA6B,CAAC;IAC9D,CAAC;IAED,8BAAQ,GAAR;QACE,MAAM,CAAC,MAAI,IAAI,CAAC,IAAI,EAAE,SAAI,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,CAAG,CAAC;IACpD,CAAC;IAED,0FAA0F;IACnF,iBAAK,GAAG,UAAC,GAAG;QACf,OAAA,GAAG,IAAI,GAAG,CAAC,KAAK,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IAArE,CAAqE,CAAC;IAc5E,kBAAC;CAAA,AAnGD,IAmGC;SAnGY,WAAW","sourcesContent":["/**\n * @coreapi\n * @module state\n */ /** for typedoc */\n\nimport { StateDeclaration, StateOrName, TargetStateDef } from \"./interface\";\nimport { ParamsOrArray } from \"../params/interface\";\nimport { TransitionOptions } from \"../transition/interface\";\nimport { StateObject } from \"./stateObject\";\nimport { toJson } from \"../common/common\";\nimport { isString } from \"../common/predicates\";\n\n/**\n * Encapsulate the target (destination) state/params/options of a [[Transition]].\n *\n * This class is frequently used to redirect a transition to a new destination.\n *\n * See:\n *\n * - [[HookResult]]\n * - [[TransitionHookFn]]\n * - [[TransitionService.onStart]]\n *\n * To create a `TargetState`, use [[StateService.target]].\n *\n * ---\n *\n * This class wraps:\n *\n * 1) an identifier for a state\n * 2) a set of parameters\n * 3) and transition options\n * 4) the registered state object (the [[StateDeclaration]])\n *\n * Many UI-Router APIs such as [[StateService.go]] take a [[StateOrName]] argument which can\n * either be a *state object* (a [[StateDeclaration]] or [[StateObject]]) or a *state name* (a string).\n * The `TargetState` class normalizes those options.\n *\n * A `TargetState` may be valid (the state being targeted exists in the registry)\n * or invalid (the state being targeted is not registered).\n */\nexport class TargetState {\n  private _params: ParamsOrArray;\n\n  /**\n   * The TargetState constructor\n   *\n   * Note: Do not construct a `TargetState` manually.\n   * To create a `TargetState`, use the [[StateService.target]] factory method.\n   *\n   * @param _identifier An identifier for a state.\n   *    Either a fully-qualified state name, or the object used to define the state.\n   * @param _definition The internal state representation, if exists.\n   * @param _params Parameters for the target state\n   * @param _options Transition options.\n   *\n   * @internalapi\n   */\n  constructor(\n    private _identifier: StateOrName,\n    private _definition?: StateObject,\n    _params?: ParamsOrArray,\n    private _options: TransitionOptions = {}\n  ) {\n    this._params = _params || {};\n  }\n\n  /** The name of the state this object targets */\n  name(): string {\n    return this._definition && this._definition.name || <string> this._identifier;\n  }\n\n  /** The identifier used when creating this TargetState */\n  identifier(): StateOrName {\n    return this._identifier;\n  }\n\n  /** The target parameter values */\n  params(): ParamsOrArray {\n    return this._params;\n  }\n\n  /** The internal state object (if it was found) */\n  $state(): StateObject {\n    return this._definition;\n  }\n\n  /** The internal state declaration (if it was found) */\n  state(): StateDeclaration {\n    return this._definition && this._definition.self;\n  }\n\n  /** The target options */\n  options() {\n    return this._options;\n  }\n\n  /** True if the target state was found */\n  exists(): boolean {\n    return !!(this._definition && this._definition.self);\n  }\n\n  /** True if the object is valid */\n  valid(): boolean {\n    return !this.error();\n  }\n\n  /** If the object is invalid, returns the reason why */\n  error(): string {\n    let base = <any> this.options().relative;\n    if (!this._definition && !!base) {\n      let stateName = base.name ? base.name : base;\n      return `Could not resolve '${this.name()}' from state '${stateName}'`;\n    }\n    if (!this._definition)\n      return `No such state '${this.name()}'`;\n    if (!this._definition.self)\n      return `State '${this.name()}' has an invalid definition`;\n  }\n\n  toString() {\n    return `'${this.name()}'${toJson(this.params())}`;\n  }\n\n  /** Returns true if the object has a state property that might be a state or state name */\n  static isDef = (obj): obj is TargetStateDef =>\n      obj && obj.state && (isString(obj.state) || isString(obj.state.name));\n\n  // /** Returns a new TargetState based on this one, but using the specified options */\n  // withOptions(_options: TransitionOptions): TargetState {\n  //   return extend(this._clone(), { _options });\n  // }\n  //\n  // /** Returns a new TargetState based on this one, but using the specified params */\n  // withParams(_params: ParamsOrArray): TargetState {\n  //   return extend(this._clone(), { _params });\n  // }\n\n  // private _clone = () =>\n  //     new TargetState(this._identifier, this._definition, this._params, this._options);\n}\n"]}